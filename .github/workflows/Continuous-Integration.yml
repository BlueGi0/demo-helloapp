# Define el nombre del workflow
name: Build and Test Feature Branch
# Especifica cuándo se ejecutará el workflow (en este caso, cuando se haga un pull request a la rama 'develop')
on:
  pull_request:
      branches: [ develop ]
      types: [ opened, reopened ]
# Define los trabajos que se llevarán a cabo durante la ejecución del workflow
jobs:
    Source-Build:
        # Define la plataforma a utilizar (ubuntu-latest)
        runs-on: ubuntu-latest
        steps:
            # Descarga el código en el contenedor
            - uses: actions/checkout@v3
              with:
                # Realizar un pull_request a 'develop': Descarga el codigo de la rama feature
                ref: ${{ github.event.pull_request.head.sha }}
            # Configura Node.js
            - name: Setup Node.js/npm to your path 
              uses: actions/setup-node@v3
              with:
                node-version: 18
            # Realiza una instalación limpia de las dependencias
            - name: Clean Install for automated envs
              run: npm ci
# Ejecuta las pruebas unitarias
    Unit-Tests:
      runs-on: ubuntu-latest
      needs: Source-Build
      if: ${{ success() }}

      steps:

          - name: Checkout Code
            uses: actions/checkout@v3
            with:
              # Descarga el código asociado con el último commit del pull request actual
              ref: ${{ github.event.pull_request.head.sha }}

          - name: Setup Node.js/npm to your path 
            uses: actions/setup-node@v3
            with:
              node-version: 18
        
          - name: Clean Install
            run: npm ci
          # Ejecuta las pruebas unitarias
          - name: Execute Tests
            run: npm test

# Merge automático a la rama 'develop'
    merge-feature-into-develop:
      runs-on: ubuntu-latest
      # Se ejecuta solo si el job anterior terminó exitoso
      needs: Unit-Tests
      if: ${{ success() }}
      # Modifica los permisos para contenido y pull requests en GITHUB_TOKEN para hacer cambios
      permissions:
        contents: write
        pull-requests: write
      steps:
# Descarga el código de la rama destino ('develop') 
        - uses: actions/checkout@v3
          with:
            ref: ${{ github.base_ref }}
            # Busca todo el historial de todas las ramas
            fetch-depth: 0
# Merge a la rama 'develop' si los jobs anteriores finalizaron correctamente
        - name: Merge to development branch
          if: ${{ success() }}
          run: |
            git config --global user.email "EMAIL-OF-WORKFLOW@USER"
            git config --global user.name "WORKFLOW-USER" 
            #Using -m "mesage" on merge command ins mandatori here in order to avoid open a text editor to write a commit message
            git merge --no-ff --verbose origin/${{ github.event.pull_request.head.ref }} -m "Merge pull request #${{ github.event.number }}"

# Realiza push de los cambios después del merge
        - name: Push changes after merge
          if: ${{ success() }}
          uses: ad-m/github-push-action@master
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            branch: ${{ github.base_ref }}
# Llama al workflow: "publish-build-as-artifact"
        - name: trigger deploy artifact
          if: success()
          uses: peter-evans/repository-dispatch@v2
          with:
            token: ${{ secrets.GITHUB_TOKEN }}
            repository: ${{ github.repository }}
            event-type: publish-artifact-event
            # Envía el nombre de la rama base utilizada en este workflow ('develop')
            client-payload: '{ "base_branch": "${{ github.base_ref }}" }'